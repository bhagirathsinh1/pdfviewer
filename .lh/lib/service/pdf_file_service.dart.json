{
    "sourceFile": "lib/service/pdf_file_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1642393868052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1642393868052,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'dart:io';\r\n\r\nimport 'package:flutter/cupertino.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_file_manager/flutter_file_manager.dart';\r\nimport 'package:intl/intl.dart';\r\nimport 'package:path_provider_extention/path_provider_extention.dart';\r\nimport 'package:pdfviewer/SQLService/favorite_pdf_model.dart';\r\nimport 'package:pdfviewer/SQLService/recent_pdf_model.dart';\r\nimport 'package:pdfviewer/SQLService/sqlService.dart';\r\nimport 'package:pdfviewer/model/pdf_list_model.dart';\r\nimport 'package:pdfviewer/service/singing_character_enum.dart';\r\n\r\nclass PdfFileService with ChangeNotifier {\r\n  // List starPDF = [];\r\n  bool isDeleted = false;\r\n  bool isNameSort = false;\r\n  bool isDateSort = false;\r\n  bool isSizeAccending = false;\r\n  bool isSizeDeccending = false;\r\n  bool isReverseSized = false;\r\n  SingingCharacter? _character;\r\n\r\n  // List<RecentListPdfModel> recentPdfList = [];\r\n  List<PdfListModel> items = [];\r\n\r\n  List<PdfListModel> favoritePdfList = [];\r\n  List<PdfListModel> files = [];\r\n  List<PdfListModel> recentPdfList = [];\r\n\r\n  Future getRecentPdfList() async {\r\n    final dbClient = await SqlModel().db;\r\n\r\n    List<Map<String, Object?>> futurePDFList = await dbClient.rawQuery(\r\n      \"Select *from ${SqlModel.tableRecent}  order by auto_id DESC\",\r\n    );\r\n\r\n    var tempValue = recentListPdfModelFromJson(jsonEncode(futurePDFList));\r\n    print(tempValue);\r\n    recentPdfList = [];\r\n\r\n    for (var file in tempValue) {\r\n      File filePath = File(file.recentpdf.toString());\r\n      var pdfname = filePath.path.split('/').last;\r\n\r\n      var lastModDate1 = filePath.lastModifiedSync();\r\n      var formattedDate1 = DateFormat('EEE, M/d/y').format(lastModDate1);\r\n\r\n      var finalFileSize = filePath.lengthSync();\r\n      var sizeInKb = (finalFileSize / (1024)).toStringAsFixed(2);\r\n      var pdfmodel = PdfListModel(\r\n          referenceFile: filePath,\r\n          pdfname: pdfname,\r\n          date: formattedDate1,\r\n          size: sizeInKb,\r\n          pdfpath: filePath.path,\r\n          isFav: favoritePdfList\r\n              .where((element) => element.pdfpath == filePath)\r\n              .isNotEmpty);\r\n\r\n      recentPdfList.add(pdfmodel);\r\n    }\r\n\r\n    notifyListeners();\r\n  }\r\n\r\n  Future getFavoritePdfList() async {\r\n    final dbClient = await SqlModel().db;\r\n    List<Map<String, Object?>> futurePDFList = await dbClient.rawQuery(\r\n        \"Select *from ${SqlModel.tableFavorite}   order by auto_id DESC\");\r\n\r\n    var tempValue = favouriteListPdfModelFromJson(jsonEncode(futurePDFList));\r\n    print(tempValue);\r\n    favoritePdfList = [];\r\n    for (var file in tempValue) {\r\n      File filePath = File(file.pdf.toString());\r\n      var pdfname = filePath.path.split('/').last;\r\n\r\n      var lastModDate1 = filePath.lastModifiedSync();\r\n      var formattedDate1 = DateFormat('EEE, M/d/y').format(lastModDate1);\r\n\r\n      var finalFileSize = filePath.lengthSync();\r\n      var sizeInKb = (finalFileSize / (1024)).toStringAsFixed(2);\r\n      var pdfmodel = PdfListModel(\r\n        referenceFile: filePath,\r\n        pdfname: pdfname,\r\n        date: formattedDate1,\r\n        size: sizeInKb,\r\n        pdfpath: filePath.path,\r\n        isFav: favoritePdfList\r\n            .where((element) => element.pdfpath == filePath)\r\n            .isNotEmpty,\r\n      );\r\n\r\n      favoritePdfList.add(pdfmodel);\r\n    }\r\n    notifyListeners();\r\n  }\r\n\r\n  Future<bool> removeFromRecentPdfList(arriveDataRecent, String table) async {\r\n    final dbClientremoveFromRecentPdfList = await SqlModel().db;\r\n    try {\r\n      var resultremoveFromRecentPdfList =\r\n          await dbClientremoveFromRecentPdfList.rawQuery(\r\n        'DELETE FROM $table WHERE recentpdf = ?',\r\n        [arriveDataRecent],\r\n      );\r\n      print(\"deleted in recent index $resultremoveFromRecentPdfList\");\r\n      getRecentPdfList();\r\n      notifyListeners();\r\n\r\n      return true;\r\n    } catch (e) {\r\n      print(e);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  Future<bool> removeFromFavoritePdfList(arrivdata, String table) async {\r\n    print(\"-----------remove from favorite called------------\");\r\n    final dbClientRemoveFromFavorite = await SqlModel().db;\r\n    try {\r\n      var resultRemoveFromFav = await dbClientRemoveFromFavorite.rawQuery(\r\n        'DELETE FROM $table WHERE pdf = ?',\r\n        [arrivdata],\r\n      ).whenComplete(() {\r\n        getFavoritePdfList();\r\n        notifyListeners();\r\n      });\r\n      print(\r\n          \"-----------------------------deleted index $resultRemoveFromFav--------------------------\");\r\n      // getFavoritePdfList();\r\n      return true;\r\n    } catch (e) {\r\n      print(e);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  Future<bool> clearRecentPdfList(String table) async {\r\n    final dbClientDelete = await SqlModel().db;\r\n    try {\r\n      var resultDelete = await dbClientDelete.rawQuery(\r\n          \"\"\"DELETE FROM $table\"\"\").whenComplete(() => notifyListeners());\r\n      print(\"deleted result $resultDelete\");\r\n      getRecentPdfList();\r\n      notifyListeners();\r\n\r\n      return true;\r\n    } catch (e) {\r\n      print(e);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  Future<bool> clearFavoritePdfList(String table) async {\r\n    final dbClientDelete = await SqlModel().db;\r\n    try {\r\n      var resultDelete = await dbClientDelete.rawQuery(\r\n          \"\"\"DELETE FROM $table\"\"\").whenComplete(() => notifyListeners());\r\n      print(\"deleted result $resultDelete\");\r\n      getFavoritePdfList();\r\n      // getFavoritePdfList();\r\n      notifyListeners();\r\n      return true;\r\n    } catch (e) {\r\n      print(e);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  Future<bool> insertIntoFavoritePdfList(String pdfPath, table) async {\r\n    final dbClient = await SqlModel().db;\r\n\r\n    var isExist = await _checkrecordExists(pdfPath.toString());\r\n\r\n    if (!isExist) {\r\n      try {\r\n        Map<String, Object> data = {\r\n          'pdf': (pdfPath),\r\n        };\r\n        await dbClient.insert(table, data);\r\n        getFavoritePdfList();\r\n        getRecentPdfList();\r\n        return true;\r\n      } catch (e) {\r\n        // throw \"asd\";\r\n        print(e);\r\n        return false;\r\n      }\r\n    } else {\r\n      throw \"Already added in favorite\";\r\n    }\r\n  }\r\n\r\n  Future<bool> _checkrecordExists(String data) async {\r\n    final dbClient = await SqlModel().db;\r\n\r\n    try {\r\n      var result = await dbClient.rawQuery(\r\n          \"\"\"select *from ${SqlModel.tableFavorite} where pdf= '$data'\"\"\");\r\n\r\n      print(\"result $result\");\r\n\r\n      if (result.isNotEmpty) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch (e) {\r\n      print(e);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  Future<void> deleteFile(File file) async {\r\n    try {\r\n      if (await file.exists()) {\r\n        await file.delete();\r\n      }\r\n      print(\"-------------------file name ${file}---------------------------\");\r\n      // removeFromFavorite(file, SqlModel.tableFavorite);\r\n      getStorageFilleMethod();\r\n      getFavoritePdfList();\r\n      notifyListeners();\r\n      print(\r\n          \"-----------table favorite ${SqlModel.tableFavorite}--------------\");\r\n    } catch (e) {\r\n      print(e);\r\n    }\r\n  }\r\n\r\n  accendingSort() {\r\n    files.sort(\r\n      (b, a) {\r\n        return b.referenceFile!\r\n            .lengthSync()\r\n            .compareTo(a.referenceFile!.lengthSync());\r\n      },\r\n    );\r\n    notifyListeners();\r\n    return true;\r\n  }\r\n\r\n  deccendingSort() {\r\n    files.sort(\r\n      (a, b) {\r\n        return b.referenceFile!\r\n            .lengthSync()\r\n            .compareTo(a.referenceFile!.lengthSync());\r\n      },\r\n    );\r\n    notifyListeners();\r\n    return true;\r\n  }\r\n\r\n  nameSort() {\r\n    files.sort(\r\n      (a, b) {\r\n        return a.pdfname!.compareTo(b.pdfname!);\r\n      },\r\n    );\r\n    notifyListeners();\r\n    return true;\r\n  }\r\n\r\n  dateSort() {\r\n    files.sort(\r\n      (b, a) {\r\n        return a.referenceFile!\r\n            .lastModifiedSync()\r\n            .compareTo(b.referenceFile!.lastModifiedSync());\r\n      },\r\n    );\r\n    notifyListeners();\r\n    return true;\r\n  }\r\n\r\n  getStorageFilleMethod() async {\r\n    //asyn function to get list of files\r\n    List<StorageInfo> storageInfo = await PathProviderEx.getStorageInfo();\r\n    var root = storageInfo[0]\r\n        .rootDir; //storageInfo[1] for SD card, geting the root directory\r\n    var fm = FileManager(root: Directory(root)); //\r\n    var temmpfiles = await fm.filesTree(\r\n        excludedPaths: [\"/storage/emulated/0/Android\"],\r\n        extensions: [\"pdf\"] //optional, to filter files, list only pdf files\r\n        );\r\n\r\n    files = [];\r\n    for (var file in temmpfiles) {\r\n      var pdfname = file.path.split('/').last;\r\n\r\n      var lastModDate1 = file.lastModifiedSync();\r\n      var formattedDate = DateFormat('EEE, M/d/y').format(lastModDate1);\r\n\r\n      var finalFileSize = file.lengthSync();\r\n      var sizeInKb = (finalFileSize / (1024)).toStringAsFixed(2);\r\n      var pdfmodel = PdfListModel(\r\n        referenceFile: file,\r\n        pdfname: pdfname,\r\n        date: formattedDate,\r\n        size: sizeInKb,\r\n        pdfpath: file.path,\r\n        isFav: favoritePdfList\r\n            .where((element) => element.pdfpath == file.path)\r\n            .isNotEmpty,\r\n      );\r\n      files.add(pdfmodel);\r\n    }\r\n\r\n    notifyListeners();\r\n    print(files);\r\n    //update the UI\r\n  }\r\n}\r\n"
        }
    ]
}